-- Paso 1: Crear usario.

BEGIN
    -- Crear el usuario
    EXECUTE IMMEDIATE 'CREATE USER C##PEDIDOS IDENTIFIED BY "123"';

    -- Asignar roles
    EXECUTE IMMEDIATE 'GRANT CONNECT TO C##PEDIDOS';
    EXECUTE IMMEDIATE 'GRANT RESOURCE TO C##PEDIDOS';

    -- Asignar privilegios del sistema
    EXECUTE IMMEDIATE 'GRANT CREATE PROCEDURE TO C##PEDIDOS';
    EXECUTE IMMEDIATE 'GRANT CREATE SEQUENCE TO C##PEDIDOS';
    EXECUTE IMMEDIATE 'GRANT CREATE TABLE TO C##PEDIDOS';
    EXECUTE IMMEDIATE 'GRANT CREATE TRIGGER TO C##PEDIDOS';
    EXECUTE IMMEDIATE 'GRANT CREATE VIEW TO C##PEDIDOS';
    EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##PEDIDOS';
END;
/

-- Paso 2: Crear la conexion.

-- Paso 3: Crear tablas, secuencias y disparadores.

-- Crear la tabla USERS
CREATE TABLE USERS (
    KEY INT PRIMARY KEY,
    IDENTIFICATION VARCHAR2(15) NOT NULL UNIQUE,
    NAME VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL UNIQUE,
    PHONE VARCHAR2(20) NOT NULL,
    ADDRESS VARCHAR2(255) NOT NULL,
    PASSWORD VARCHAR2(256) NOT NULL,
    ROLE VARCHAR2(100) NOT NULL,
    CREATIONDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    MODIFICATIONDATE TIMESTAMP,
    CREATEDBY INT NULL,
    MODIFIEDBY INT NULL,
    ROWVERSION NUMBER(20) DEFAULT 0 NOT NULL,

    CONSTRAINT FK_USERS_CREATEDBY FOREIGN KEY (CREATEDBY) REFERENCES USERS(KEY) ON DELETE SET NULL,
    CONSTRAINT FK_USERS_MODIFIEDBY FOREIGN KEY (MODIFIEDBY) REFERENCES USERS(KEY) ON DELETE SET NULL
);

-- Crear secuencia para la columna KEY
CREATE SEQUENCE USERKEYSEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- Trigger BEFORE INSERT para asignar automáticamente el KEY
CREATE OR REPLACE TRIGGER USERS_BI
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    IF :NEW.KEY IS NULL THEN
        :NEW.KEY := USERKEYSEQ.NEXTVAL;
    END IF;
END;
/

-- Trigger BEFORE UPDATE para incrementar el ROWVERSION y actualizar la fecha de modificación
CREATE OR REPLACE TRIGGER USERS_BU
BEFORE UPDATE ON USERS
FOR EACH ROW
BEGIN
    :NEW.ROWVERSION := NVL(:OLD.ROWVERSION, 0) + 1;
    :NEW.MODIFICATIONDATE := CURRENT_TIMESTAMP;
END;
/



-- CUSTOMERS
CREATE TABLE CUSTOMERS (
    KEY INT PRIMARY KEY,
    IDENTIFICATION VARCHAR2(15) NOT NULL UNIQUE,
    NAME VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL UNIQUE,
    PHONE VARCHAR2(20) NOT NULL,
    ADDRESS VARCHAR2(255) NOT NULL,
    PASSWORD VARCHAR2(256) NOT NULL,
    CREATIONDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    MODIFICATIONDATE TIMESTAMP NULL,
    CREATEDBY INT NOT NULL,
    MODIFIEDBY INT NULL,
    ROWVERSION NUMBER(20) DEFAULT 0 NOT NULL,

    CONSTRAINT FK_CUSTOMERS_CREATEDBY FOREIGN KEY (CREATEDBY) REFERENCES USERS(KEY),
    CONSTRAINT FK_CUSTOMERS_MODIFIEDBY FOREIGN KEY (MODIFIEDBY) REFERENCES USERS(KEY)
);

-- Crear secuencia para la columna KEY
CREATE SEQUENCE CUSTOMERKEYSEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- Trigger BEFORE INSERT para asignar automáticamente el KEY
CREATE OR REPLACE TRIGGER CUSTOMERS_BI
BEFORE INSERT ON CUSTOMERS
FOR EACH ROW
BEGIN
    IF :NEW.KEY IS NULL THEN
        :NEW.KEY := CUSTOMERKEYSEQ.NEXTVAL;
    END IF;
END;
/

-- Trigger BEFORE UPDATE para incrementar el ROWVERSION y actualizar la fecha de modificación
CREATE OR REPLACE TRIGGER CUSTOMERS_BU
BEFORE UPDATE ON CUSTOMERS
FOR EACH ROW
BEGIN
    :NEW.ROWVERSION := NVL(:OLD.ROWVERSION, 0) + 1;
    :NEW.MODIFICATIONDATE := CURRENT_TIMESTAMP;
END;
/



-- CATEGORIES
CREATE TABLE CATEGORIES (
    KEY INT PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL UNIQUE,
    CREATIONDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    MODIFICATIONDATE TIMESTAMP NULL,
    CREATEDBY INT NOT NULL,
    MODIFIEDBY INT NULL,
    ROWVERSION NUMBER(20) DEFAULT 0 NOT NULL,

    CONSTRAINT FK_CATEGORIES_CREATEDBY FOREIGN KEY (CREATEDBY) REFERENCES USERS(KEY),
    CONSTRAINT FK_CATEGORIES_MODIFIEDBY FOREIGN KEY (MODIFIEDBY) REFERENCES USERS(KEY)
);

-- Crear secuencia para la columna KEY
CREATE SEQUENCE CATEGORYKEYSEQ 
    START WITH 1 
    INCREMENT BY 1 
    NOCACHE 
    NOCYCLE;

-- Trigger BEFORE INSERT para asignar automáticamente el KEY
CREATE OR REPLACE TRIGGER CATEGORIES_BI
BEFORE INSERT ON CATEGORIES
FOR EACH ROW
BEGIN
    IF :NEW.KEY IS NULL THEN
        :NEW.KEY := CATEGORYKEYSEQ.NEXTVAL;
    END IF;
END;
/

-- Trigger BEFORE UPDATE para incrementar el ROWVERSION y actualizar la fecha de modificación
CREATE OR REPLACE TRIGGER CATEGORIES_BU
BEFORE UPDATE ON CATEGORIES
FOR EACH ROW
BEGIN
    :NEW.ROWVERSION := NVL(:OLD.ROWVERSION, 0) + 1;
    :NEW.MODIFICATIONDATE := CURRENT_TIMESTAMP;
END;
/



-- SUPPLIERS
CREATE TABLE SUPPLIERS (
    KEY INT PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL UNIQUE,
    CREATIONDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    MODIFICATIONDATE TIMESTAMP NULL,
    CREATEDBY INT NOT NULL,
    MODIFIEDBY INT NULL,
    ROWVERSION NUMBER(20) DEFAULT 0 NOT NULL,

    CONSTRAINT FK_SUPPLIERS_CREATEDBY FOREIGN KEY (CREATEDBY) REFERENCES USERS(KEY),
    CONSTRAINT FK_SUPPLIERS_MODIFIEDBY FOREIGN KEY (MODIFIEDBY) REFERENCES USERS(KEY)
);

-- Crear secuencia para la columna KEY
CREATE SEQUENCE SUPPLIERKEYSEQ 
    START WITH 1 
    INCREMENT BY 1 
    NOCACHE 
    NOCYCLE;

-- Trigger BEFORE INSERT para asignar automáticamente el KEY
CREATE OR REPLACE TRIGGER SUPPLIERS_BI
BEFORE INSERT ON SUPPLIERS
FOR EACH ROW
BEGIN
    IF :NEW.KEY IS NULL THEN
        :NEW.KEY := SUPPLIERKEYSEQ.NEXTVAL;
    END IF;
END;
/

-- Trigger BEFORE UPDATE para incrementar el ROWVERSION y actualizar la fecha de modificación
CREATE OR REPLACE TRIGGER SUPPLIERS_BU
BEFORE UPDATE ON SUPPLIERS
FOR EACH ROW
BEGIN
    :NEW.ROWVERSION := NVL(:OLD.ROWVERSION, 0) + 1;
    :NEW.MODIFICATIONDATE := CURRENT_TIMESTAMP;
END;
/



